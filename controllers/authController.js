require("dotenv").config(); // Chargement des variables d'environnement
const User = require("../models/User"); // Mod√®le utilisateur
const jwt = require("jsonwebtoken"); // Gestion des tokens
const bcrypt = require("bcryptjs"); // Hachage des mots de passe
const SuspiciousLog = require("../models/SuspiciousLog");

const DEBUG_MODE = process.env.DEBUG_MODE === "true";


// INSCRIPTION - USER
const registerUser = async (req, res) => {
    try {
        const { username, email, password, role } = req.body;

        console.log("Requ√™te re√ßue - req.body :", req.body);

        // üõë S√©curit√© : Interdire la tentative d‚Äôenregistrement avec un r√¥le personnalis√©

        if (role && role !== "user") {
            console.warn("‚ùó Tentative d'enregistrement avec un r√¥le non autoris√© :", role);

            await SuspiciousLog.create({
                ip: req.ip,
                email,
                username,
                triedRole: role
            });

            return res.status(403).json({ error: "Cr√©ation d'utilisateur avec r√¥le interdit." });
        }

        // V√©rifier les champs obligatoires
        if (!username || !email || !password) {
            return res.status(400).json({ error: "Tous les champs sont requis." });
        }

        // V√©rifier si l'utilisateur existe d√©j√†
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            console.log("Utilisateur existant trouv√© :", existingUser);
            return res.status(400).json({ error: "Email d√©j√† utilis√©." });
        }

        // Hacher le mot de passe
        const hashedPassword = await bcrypt.hash(password, 10);

        // Cr√©er l'utilisateur
        const newUser = await User.create({ username, email, password: hashedPassword, role: "user" });
        console.log("Nouvel utilisateur cr√©√© :", newUser);

        res.status(201).json({ message: "Utilisateur cr√©√© avec succ√®s !" });
    } catch (error) {
        console.error("Erreur lors de l'inscription :", error);
        res.status(500).json({ error: "Erreur lors de l'inscription." });
    }
};

// CONNEXION - USER
const generateToken = (user) => {
    return jwt.sign({ id: user._id, role: user.role }, process.env.JWT_SECRET, { expiresIn: "1h" });
};
const generateRefreshToken = (user) => {
    return jwt.sign({ id: user._id, role: user.role }, process.env.REFRESH_SECRET, { expiresIn: "7d" });
}

const loginUser = async (req, res) => {
    try {
        const { identifier, password } = req.body;
        console.log("Tentative de connexion - Identifiant :", identifier);

        // V√©rifier si l'utilisateur existe
        const user = await User.findOne({
            $or: [{ username: identifier }, { email: identifier }]
        });

        if (DEBUG_MODE) {
            console.log("Utilisateur trouv√© :", user);
            console.log("Mot de passe re√ßu :", password);
            console.log("Mot de passe enregistr√© :", user?.password);
        }

        if (!user) {
            console.log("Utilisateur non trouv√© !");
            return res.status(400).json({ error: "Utilisateur non trouv√©." });
        }

        // V√©rifier le mot de passe
        const isMatch = await bcrypt.compare(password, user.password);
        console.log("R√©sultat de bcrypt.compare() :", isMatch);

        if (!isMatch) {
            console.log("√âchec de la connexion : Mot de passe incorrect !");
            return res.status(401).json({ error: "Mot de passe incorrect." });
        }

        // G√©n√©rer un token JWT
        const token = generateToken(user);
        console.log("Token g√©n√©r√© :", token);
        const refreshTokenValue = generateRefreshToken(user);
        console.log("RefreshToken g√©n√©r√© :", refreshTokenValue)

        res.cookie("accessToken", token, { httpOnly: true, secure: process.env.NODE_ENV === "production", sameSite: "Lax" });
        res.cookie("refreshToken", refreshTokenValue, { httpOnly: true, secure: process.env.NODE_ENV === "production", sameSite: "Lax" })

        res.status(200).json({
            message: "Connexion r√©ussie !",
            username: user.username,
            role: user.role
        });
    } catch (error) {
        console.error("Erreur lors de la connexion :", error);
        res.status(500).json({ error: "Erreur lors de la connexion." });
    }
};

// REFRESH TOKEN
const refreshToken = (req, res) => {
    console.log("Cookies re√ßus :", req.cookies);

    const token = req.cookies.refreshToken;

    if (!token) {
        console.log("Aucun Refresh Token trouv√© !");
        return res.status(401).json({ error: "Refresh Token manquant." });
    }

    try {
        const decoded = jwt.verify(token, process.env.REFRESH_SECRET);
        console.log("Token d√©cod√© :", decoded);

        const newAccessToken = jwt.sign({ id: decoded.id, role: decoded.role }, process.env.JWT_SECRET, { expiresIn: "1h" });
        console.log("Nouveau Token g√©n√©r√© :", newAccessToken);
        res.cookie("accessToken", newAccessToken, { httpOnly: true, secure: process.env.NODE_ENV === "production", sameSite: "Lax" });
        res.status(200).json({ message: "Access Token renouvel√© avec succ√®s !" });

    } catch (error) {
        console.error("Erreur de validation du Refresh Token :", error);
        // Efface le refreshToken si la validation √©choue
        res.clearCookie("refreshToken", { httpOnly: true, secure: process.env.NODE_ENV === "production", sameSite: "Lax" })
        res.status(403).json({ error: "Refresh Token invalide ou expir√©." });
    }
};

// D√âCONNEXION - USER
const logoutUser = (req, res) => {
    console.log("D√©connexion demand√©e !");
    res.clearCookie("accessToken", { httpOnly: true, secure: process.env.NODE_ENV === "production", sameSite: "Lax" });
    res.clearCookie("refreshToken", { httpOnly: true, secure: process.env.NODE_ENV === "production", sameSite: "Lax" });
    res.status(200).json({ message: "D√©connexion r√©ussie !" });
};

module.exports = { registerUser, loginUser, logoutUser, refreshToken };
